# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SMGP_dowloader
                                 A QGIS plugin
 This plugin alows you to download Polish geological maps
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-09-24
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Karol Majewski/PIG-PIB
        email                : majewskikar@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from .utils_select_output import OutputFile
from .utils_validate import Validate
from .utils_find_point import FindPoint
from .utils_gui import GuiUtils
from .utils_download_map import DownloadMap
from .utils_grid_manager import GridManager
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import *
from qgis.core import QgsVectorLayer

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .SMGP_dowloader_dialog import SMGP_dowloaderDialog
import os.path


class SMGP_dowloader:

    def __init__(self, iface):

        # Save reference to the QGIS interface
        self.iface = iface
        # inmitialize canvas
        self.canvas = iface.mapCanvas()
 
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SMGP_dowloader_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&SMGP Downloader')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.map_tool = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SMGP_dowloader', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/SMGP_dowloader/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Download maps'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&SMGP Downloader'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        if self.first_start:
            self.first_start = False

            #grid paths:
            path_10k = os.path.join(self.plugin_dir, "grids/10k/10k_grid.shp")
            path_50k = os.path.join(self.plugin_dir, "grids/50k/50k_grid.shp")
            path_200k = os.path.join(self.plugin_dir, "grids/200k/200k_grid.shp") 
            self.grid_50k = QgsVectorLayer(path_50k, "50k_grid", "ogr")
            self.grid_200k = QgsVectorLayer(path_200k, "200k_grid", "ogr")
            self.grid_10k = QgsVectorLayer(path_10k, "10k_grid", "ogr")            

            #instancje
            self.dlg = SMGP_dowloaderDialog()
            self.grid_manager = GridManager(self.dlg, self.plugin_dir)
            self.download_map = DownloadMap(self.dlg)
            self.utils_gui = GuiUtils(self.dlg)
            self.find_point = FindPoint(self.dlg, self.iface, self.grid_10k, self.grid_50k, self.grid_200k)
            self.validate = Validate(self.dlg, self.download_map)
            self.output_file = OutputFile(self.dlg)
            
            #temporary disable 10k checkbox
            self.dlg.checkBox_10k.setEnabled(False)

            # akcje przycisków
            self.dlg.download10k_pushButton.clicked.connect(self.grid_manager.download_grid)
            self.dlg.download50k_pushButton.clicked.connect(self.grid_manager.download_grid)
            self.dlg.download200k_pushButton.clicked.connect(self.grid_manager.download_grid)
            self.dlg.save_dir_pushButton.clicked.connect(self.output_file.select_output_file)
            self.dlg.FindButton_pushButton.clicked.connect(self.find_point.click_find)

            # checkboksy
            self.dlg.checkBox_10k.stateChanged.connect(self.utils_gui.checkbox_changed)
            self.dlg.checkBox_50k.stateChanged.connect(self.utils_gui.checkbox_changed)
            self.dlg.checkBox_200k.stateChanged.connect(self.utils_gui.checkbox_changed)

            # walidator numeru arkusza
            self.dlg.download_map_pushbutton.clicked.connect(self.validate.validate_and_process)
            

        # pokaż okno niemodalnie
        self.dlg.show()
        self.dlg.raise_()
        self.dlg.activateWindow()





