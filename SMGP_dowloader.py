# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SMGP_dowloader
                                 A QGIS plugin
 This plugin alows you to download Polish geological maps
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-09-24
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Karol Majewski/PIG-PIB
        email                : majewskikar@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon, QIntValidator
from qgis.PyQt.QtWidgets import QAction, QMessageBox, QListWidgetItem, QFileDialog
from qgis.core import QgsRasterLayer, QgsProject, QgsVectorLayer
import requests
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .SMGP_dowloader_dialog import SMGP_dowloaderDialog
import os.path


class SMGP_dowloader:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SMGP_dowloader_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&SMGP Downloader')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SMGP_dowloader', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/SMGP_dowloader/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Download maps'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&SMGP Downloader'),
                action)
            self.iface.removeToolBarIcon(action)



    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = SMGP_dowloaderDialog()
            self.dlg.download50k_pushButton.clicked.connect(self.download_grid)
            self.dlg.download200k_pushButton.clicked.connect(self.download_grid)
            self.dlg.numer_ark_lineEdit.setValidator(QIntValidator(1,1082,self.dlg))
            self.dlg.save_dir_pushButton.clicked.connect(self.select_output_file)

        
        #clearing listWidget and adding items
        self.dlg.listWidget.clear()
        map_items = ['mapa geologiczna','mapa hydrogeologiczna']
        for item_text in map_items:
            item = QListWidgetItem(item_text)
            self.dlg.listWidget.addItem(item)
        
        # show the dialog
        self.dlg.show()
        result = self.dlg.exec_()


        if result:
            selected_item = self.dlg.listWidget.currentItem()
            if selected_item.text() == 'mapa geologiczna':
                lineedit = self.dlg.numer_ark_lineEdit.text()
                linevalidator = self.dlg.numer_ark_lineEdit.validator()
                state, _, _ = linevalidator.validate(lineedit, 0)
                if state != QIntValidator.Acceptable:
                    QMessageBox.information(self.dlg, "Invalid", "Taki arkusz nie istnieje! Wpisz liczbę od 1 do 1085.")
                else:
                    self.process_number(lineedit)
            elif selected_item.text() == 'mapa hydrogeologiczna':
                QMessageBox.information(self.dlg, "Information", "Kliknąłeś mapę hydrogeologiczną" )

    def download_grid(self): 
        sender = self.dlg.sender()
        if sender == self.dlg.download50k_pushButton:
            path_50k = os.path.join(self.plugin_dir, "grids/50k/50k_grid.shp")
            grid_50k = QgsVectorLayer(path_50k, "50k_grid", "ogr")
            if not grid_50k.isValid():
                QMessageBox.critical(self.dlg, "Error", "Failed to load the vector layer.")
                return
            QgsProject.instance().addMapLayer(grid_50k)
            QMessageBox.information(self.dlg, "Info", "Pobrano siatkę 50k")
        if sender == self.dlg.download200k_pushButton:
            path_200k = os.path.join(self.plugin_dir, "grids/200k/200k_grid.shp")
            grid_200k = QgsVectorLayer(path_200k, "200k_grid", "ogr")
            if not grid_200k.isValid():
                QMessageBox.critical(self.dlg, "Error", "Failed to load the vector layer.")
                return
            QgsProject.instance().addMapLayer(grid_200k)
            QMessageBox.information(self.dlg, "Info", "Pobrano siatkę 200k")


    #searching for url with basic smgp map
    def process_number(self, lineedit_value):
        number = str(lineedit_value)
        number_checked = self.process_number_checker(number)
        mapa_geologiczna_link = f'https://bazadata.pgi.gov.pl/data/smgp/arkusze_skany/smgp{number_checked}.jpg'
        mapa_geologiczna_download = requests.get(mapa_geologiczna_link)
        filename = f'smgp{number}.jpg'
        output_dir = self.dlg.save_dir_lineEdit.text()
        output_path = os.path.join(output_dir, filename)  # Combine directory and filename
        if output_path:
            self.execute_mapa_geologiczna(output_path, mapa_geologiczna_download, number_checked)


    #checking number length and adding 0 if needed - used for process_number function
    def process_number_checker(self, number):
        if len(number) == 1:
            number_checker = '000' + number
        elif len(number) == 2:
            number_checker = '00' + number
        elif len(number) == 3:
            number_checker = '0' + number
        else:
            number_checker = number
        return number_checker
    
    def select_output_file(self):
        directory = QFileDialog.getExistingDirectory(
            self.dlg,
            "Select directory to save files",
            "",
            QFileDialog.ShowDirsOnly | QFileDialog.DontResolveSymlinks)  
        self.dlg.save_dir_lineEdit.setText(directory) 

    def execute_mapa_geologiczna(self, output_path, mapa_geologiczna_download, number_checked):
            try:
                with open(output_path, 'wb') as file:
                    file.write(mapa_geologiczna_download.content)
                raster_layer = QgsRasterLayer(output_path, f'SMGP {number_checked}')
                if raster_layer.isValid():
                    QgsProject.instance().addMapLayer(raster_layer)
                    QMessageBox.information(self.dlg, "Info", f"Zapisano arkusz w: {output_path}")
                else:
                    QMessageBox.critical(self.dlg, "Error", "Failed to load the raster layer.")

                
            except Exception as e:
                QMessageBox.critical(self.dlg, "Error", f"Failed to save file: {e}")
